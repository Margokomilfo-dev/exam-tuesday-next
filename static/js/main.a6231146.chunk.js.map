{"version":3,"sources":["components/SetBoard/SetBoard.module.css","components/CountBoard/CountBoard.module.css","App.module.css","components/Button/Button.module.css","components/Button/Button.tsx","components/CountBoard/CountBoard.tsx","components/SetBoard/SetBoard.tsx","App.tsx","index.tsx"],"names":["module","exports","Button","props","onClick","buttonFunction","disabled","disabledButton","value","className","s","button","title","CountBoard","board","startValue","maxValue","activeMaxValue","activeMinValue","text","errorText","maxInc","SetBoard","maximumValue","setText","inputBlock","onFocus","setActiveMaxValue","inputBoard","inputBoardFire","onChange","e","maxCurrentValue","Number","currentTarget","setMaximumValue","onChangeMaxValue","type","setActiveMinValue","setStartValue","startCurrentValue","onChangeStartValue","setFunc","disabledSetButton","getMinValue","localStorage","getItem","getMaxValue","App","useState","setValue","setBoard","setItem","toString","project","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6231146.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"SetBoard_board__1zlHp\",\"inputBlock\":\"SetBoard_inputBlock__16h2s\",\"inputFire\":\"SetBoard_inputFire__2sndh\",\"inputBoard\":\"SetBoard_inputBoard__1niao\",\"inputBoardFire\":\"SetBoard_inputBoardFire__WIRrf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"CountBoard_board__2rNGb\",\"value\":\"CountBoard_value__1yeeJ\",\"maxInc\":\"CountBoard_maxInc__1-n2l\",\"text\":\"CountBoard_text__1Ainl\",\"errorText\":\"CountBoard_errorText__3O3yW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"project\":\"App_project__3oP_a\",\"counter\":\"App_counter__3sldz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__32iPT\"};","import React from \"react\"\r\nimport s from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n  title: string\r\n  buttonFunction: () => void\r\n  value: number\r\n  disabledButton: (value: number) => boolean\r\n}\r\nexport const Button: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\r\n  return (\r\n      <div>\r\n        <button onClick={props.buttonFunction} disabled={props.disabledButton(props.value)}\r\n                className={s.button}>{props.title}</button>\r\n      </div>\r\n  )\r\n}","import React from 'react'\r\nimport s from './CountBoard.module.css'\r\nimport { TextType } from '../../App'\r\n\r\ntype CountBoardPropsType = {\r\n    value: number\r\n    maxValue: number\r\n    startValue: number\r\n    text: string\r\n    setText: (text: TextType) => void\r\n    activeMaxValue: boolean\r\n    activeMinValue: boolean\r\n}\r\n\r\nexport const CountBoard: React.FC<CountBoardPropsType> = (props: CountBoardPropsType) => {\r\n\r\n    return (\r\n        <div className={s.board}>\r\n            { props.startValue < 0 ||  props.maxValue < 0 || props.activeMaxValue || props.activeMinValue\r\n                ? <div className={(props.text === 'Incorrect value!') ? s.errorText : s.text }> {props.text}</div>\r\n                : <div className={(props.value === props.maxValue) ? s.maxInc : s.value}>{props.value}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react'\r\nimport '../../App.css'\r\nimport s from \"./SetBoard.module.css\"\r\nimport {Button} from \"../Button/Button\"\r\nimport {TextType} from \"../../App\"\r\n\r\n\r\ntype SetBoardPropsType = {\r\n    value: number\r\n    setFunc: () => void\r\n    disabledSetButton: (value: number) => boolean\r\n    maximumValue: number\r\n    setMaximumValue: (value: number) => void\r\n    startValue: number\r\n    setStartValue: (value: number) => void\r\n    activeMaxValue: boolean\r\n    setActiveMaxValue: (value: boolean) => void\r\n    activeMinValue: boolean\r\n    setActiveMinValue: (value: boolean) => void\r\n    text: string\r\n    setText: (text: TextType) => void\r\n}\r\n\r\nexport const SetBoard: React.FC<SetBoardPropsType> = (props: SetBoardPropsType) => {\r\n    (props.startValue === 0 && props.maximumValue > 0) || (props.maximumValue > 0 && props.maximumValue > props.startValue && props.startValue >= 0)\r\n        ? props.setText(`enter value and press 'set'`)\r\n        : props.setText('Incorrect value!')\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setActiveMaxValue(true)\r\n        let maxCurrentValue: number = Number(e.currentTarget.value)\r\n        props.setMaximumValue(maxCurrentValue)\r\n    }\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.setActiveMinValue(true)\r\n        props.setStartValue(0)\r\n        let startCurrentValue = Number(e.currentTarget.value)\r\n        props.setStartValue(startCurrentValue)\r\n    }\r\n\r\n    return (\r\n        <div className='counter'>\r\n            <div className={s.board}>\r\n                <div className={s.inputBlock}>\r\n                    <span>max value: </span>\r\n                    <input onFocus={()=> {props.setActiveMaxValue(true)}}\r\n                           className={(props.text === 'Incorrect value!') ? `${s.inputBoard} ${s.inputBoardFire}` : `${s.inputBoard} `}\r\n                           onChange={(e) => {onChangeMaxValue(e)}} type=\"number\"\r\n                           value= {props.maximumValue}/>\r\n                </div>\r\n                <div\r\n                    className={s.inputBlock}>\r\n                    <span>start value:</span>\r\n                    <input onFocus={()=> {props.setActiveMinValue(true)}}\r\n                           className={(props.text === 'Incorrect value!') ? `${s.inputBoard} ${s.inputBoardFire}` : `${s.inputBoard} `}\r\n                           onChange={(e) => {onChangeStartValue(e)}} type=\"number\"\r\n                           value={props.startValue}/>\r\n                </div>\r\n            </div>\r\n            <div className='buttons'>\r\n                <Button title={'set'} buttonFunction={props.setFunc} value={props.value}\r\n                        disabledButton={props.disabledSetButton} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\nimport s from './App.module.css'\r\nimport './App.css'\r\nimport {Button} from \"./components/Button/Button\"\r\nimport {CountBoard} from \"./components/CountBoard/CountBoard\"\r\nimport {SetBoard} from \"./components/SetBoard/SetBoard\"\r\n\r\nexport type TextType = `enter value and press 'set'` | `Incorrect value!`\r\n\r\n\r\ntype getValueType = string | null\r\nexport let getMinValue: getValueType = localStorage.getItem('min')\r\nexport let getMaxValue: getValueType = localStorage.getItem('max')\r\n\r\nexport const App: React.FC = () => {\r\n\r\n    const [maximumValue, setMaximumValue] = useState<number>(Number(getMaxValue))\r\n    const [startValue, setStartValue] = useState<number>(Number(getMinValue))\r\n    const [value, setValue] = useState<number>(0)\r\n    const [text, setText] = useState <TextType> (`enter value and press 'set'` )\r\n    const [activeMaxValue, setActiveMaxValue] = useState<boolean>(true)\r\n    const [activeMinValue, setActiveMinValue] = useState<boolean>(true)\r\n    const [board, setBoard] = useState<number>(1)\r\n\r\n    const setFunc = () => {\r\n        setValue(startValue)\r\n        setActiveMinValue(false)\r\n        setActiveMaxValue(false)\r\n        localStorage.setItem('max', maximumValue.toString());\r\n        localStorage.setItem('min', startValue.toString());\r\n        board === 1 ? setBoard(2) : setBoard(1)\r\n    }\r\n    const incFunc = () => {\r\n        (value >= startValue && value <= maximumValue) && setValue(value + 1)\r\n    }\r\n    const resFunc = () => {\r\n        setValue(0)\r\n    }\r\n\r\n    const disabledSetButton = (value: number) => {\r\n        return !(maximumValue && startValue >= 0 && maximumValue > startValue && maximumValue !== startValue && maximumValue > 0 && startValue >= 0);\r\n    }\r\n    const disabledIncButton = (value: number) => {\r\n        return !(value >= 0 && value < maximumValue && value >= startValue && (!activeMaxValue && !activeMinValue));\r\n    }\r\n    const disabledResButton = (value: number) => {\r\n        return value <= 0;\r\n    }\r\n\r\n    return (\r\n        <div className={s.project}>\r\n            {board === 1 ?\r\n                <SetBoard value={value} setFunc={setFunc} disabledSetButton={disabledSetButton}\r\n                          maximumValue={maximumValue}\r\n                          setMaximumValue={setMaximumValue}\r\n                          startValue={startValue}\r\n                          setStartValue={setStartValue}\r\n                          activeMaxValue={activeMaxValue}\r\n                          setActiveMaxValue={setActiveMaxValue}\r\n                          activeMinValue={activeMinValue}\r\n                          setActiveMinValue={setActiveMinValue}\r\n                          text={text}\r\n                          setText={setText}\r\n                />\r\n                :\r\n                <div className='counter'>\r\n                    <CountBoard value={value} maxValue={maximumValue} startValue={startValue}\r\n                                text={text} setText={setText}\r\n                                activeMaxValue={activeMaxValue} activeMinValue={activeMinValue}\r\n                    />\r\n                    <div className='buttons'>\r\n                        <Button title={'inc'} buttonFunction={incFunc} value={value}\r\n                                disabledButton={disabledIncButton}/>\r\n                        <Button title={'reset'} buttonFunction={resFunc} value={value}\r\n                                disabledButton={disabledResButton}/>\r\n                        <Button title={'set'} buttonFunction={setFunc} value={value}\r\n                                disabledButton={disabledSetButton}/>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport { App } from './App'\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}